#!/usr/bin/env python
# -*- coding: utf-8 -*-
__Auther__ = 'M4x'
import binascii
import string
import pdb

data = [0x6F, 0x59, 0x41, 0xD6, 0x90, 0xE9, 0xA3, 0x80, 0x9B, 0x5C, 0x8D, 0xC9, 0xAF, 0xAF, 0x05, 0x0D, 0x2D, 0xA1, 0x72, 0x13, 0x7B, 0x11, 0x5F, 0x5D, 0xFD, 0xFB, 0x01, 0x40, 0x6B, 0xD5, 0xD2, 0xA7, 0x7E, 0xFB, 0x04, 0x7D, 0x5E, 0x89, 0x42, 0x2E, 0xB3, 0x7E, 0xC9, 0x61, 0xC3, 0x43, 0xAB, 0x84, 0xDD, 0x29, 0xC1, 0x9F, 0x4D, 0x2F, 0x59, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
#  print data

def crc(s, cnt):
    for a in dic:
        for b in dic:
            for c in dic:
                ans = s + a + b + c
                #  print tmp
                if (binascii.crc32(ans) & 0xffffffff) == hashes[cnt]:
                    #  pdb.set_trace()
                    return ans
def trans(i):
    crc = hex(data[i])[2: ]
    if len(crc) == 1:
        return '0' + crc
    else:
        return crc

hashes = []
for i in range(0, len(data), 4):
    num = trans(i + 3) + trans(i + 2) + trans(i + 1) + trans(i)
    #  print trans(i + 3), trans(i + 2), trans(i + 1), trans(i), num
    hashes.append(int(num, 16))

#  print hashes

dic = string.ascii_letters + string.digits + " _-{},"
#  dic = string.printable
#  ans = 'FLAG{'
ans = ''
cnt = 0
while True:
    try:
        ans = crc(ans, cnt)
        cnt += 1
        print ans
    except:
        break
